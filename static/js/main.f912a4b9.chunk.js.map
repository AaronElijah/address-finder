{"version":3,"sources":["containers/AddressForm/reducer.ts","components/Header/Header.tsx","components/Dropdown/Dropdown.tsx","components/InputSearch/InputSearchView.tsx","components/InputSearch/InputSearch.tsx","context/Context.ts","containers/AddressForm/fetchAddress.ts","context/reducer.ts","containers/AddressForm/AddressForm.tsx","components/Modal/Modal.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["actionTypes","Header","title","subtitle","className","Dropdown","defaultMessage","options","value","handleChangeValue","onChange","e","target","undefined","style","display","map","option","label","InputSearchView","placeholder","inputValue","onInputChange","onSearch","disabled","type","onClick","InputSearch","handleChange","handleSearch","preventDefault","length","initialContext","modal","isVisible","subheading","Context","React","createContext","fetchAddress","postcode","setModal","a","config","params","format","validateStatus","status","axios","get","then","response","data","addresses","catch","error","Message","request","reducer","state","action","updateYears","years","payload","newValue","updateMonths","months","updatePostcode","setAddresses","setChosenAddress","addressParts","addressOption","split","chosenAddress","line1","line2","line3","city","county","updateChosenAddress","otherAddress","newPostcode","definedNewAddress","Object","keys","reduce","newAddress","key","saveAddress","savedAddress","deleteAddress","updateModal","yearOptions","Array","from","_","i","monthOptions","initialAddressFormState","isPostcodeDisabled","AddressForm","address","isDisabled","useReducer","dispatch","contextDispatch","useContext","contextActionTypes","id","parseInt","line","isSaveButtonDisabled","Modal","content","createPortal","document","body","App","contextReducer","context","Provider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f912a4b9.chunk.js","sourcesContent":["export type Address = {\n  line1: string;\n  line2: string;\n  line3: string;\n  city: string;\n  county: string;\n};\n\nexport type AddressWithPostcode = Address & {\n  postcode: string;\n};\n\nexport type SavedAddress = AddressWithPostcode & {\n  postcode: string;\n  years: number;\n  months: number;\n};\n\nexport interface AddressFormStateType {\n  years: number | null;\n  months: number | null;\n  postcode: string | null;\n  addresses: string[][];\n  chosenAddress: Address | null;\n  savedAddress: SavedAddress | null;\n}\n\nexport enum actionTypes {\n  updateYears = \"update/years\",\n  updateMonths = \"update/months\",\n  updatePostcode = \"update/postcode\",\n  setAddresses = \"set/addresses\",\n  setChosenAddress = \"set/chosenaddress\",\n  updateChosenAddress = \"update/chosenaddress\",\n  saveAddress = \"save/address\",\n  deleteAddress = \"delete/address\",\n}\n\nexport interface UpdateYearsAction {\n  type: actionTypes.updateYears;\n  payload: { newValue: number };\n}\n\nexport interface UpdateMonthsAction {\n  type: actionTypes.updateMonths;\n  payload: { newValue: number };\n}\n\nexport interface UpdatePostcodeAction {\n  type: actionTypes.updatePostcode;\n  payload: { newValue: string };\n}\n\nexport interface SetAddressesAction {\n  type: actionTypes.setAddresses;\n  payload: { addresses: string[][] };\n}\nexport interface SetChosenAddressAction {\n  type: actionTypes.setChosenAddress;\n  payload: { addressOption: string };\n}\n\nexport interface UpdateChosenAddressAction {\n  type: actionTypes.updateChosenAddress;\n  payload: Record<string, string>;\n}\n\nexport interface SaveAddressAction {\n  type: actionTypes.saveAddress;\n}\n\nexport interface DeleteAddressAction {\n  type: actionTypes.deleteAddress;\n}\n\ntype AddressFormActionType =\n  | UpdateYearsAction\n  | UpdateMonthsAction\n  | UpdatePostcodeAction\n  | SetAddressesAction\n  | SetChosenAddressAction\n  | UpdateChosenAddressAction\n  | SaveAddressAction\n  | DeleteAddressAction;\n\nexport const reducer = (\n  state: AddressFormStateType,\n  action: AddressFormActionType\n): AddressFormStateType => {\n  switch (action.type) {\n    case actionTypes.updateYears:\n      return { ...state, years: action.payload.newValue };\n    case actionTypes.updateMonths:\n      return { ...state, months: action.payload.newValue };\n    case actionTypes.updatePostcode:\n      return { ...state, postcode: action.payload.newValue };\n    case actionTypes.setAddresses:\n      return { ...state, addresses: action.payload.addresses };\n    case actionTypes.setChosenAddress:\n      const addressParts = action.payload.addressOption.split(\",\");\n      return {\n        ...state,\n        chosenAddress: {\n          line1: addressParts[0],\n          line2: addressParts[1],\n          line3: addressParts[2],\n          city: addressParts[3],\n          county: addressParts[4],\n        },\n      };\n    case actionTypes.updateChosenAddress:\n      const { postcode, ...otherAddress } = action.payload;\n      const newPostcode = postcode !== undefined ? postcode : state.postcode;\n      const definedNewAddress: any = Object.keys(otherAddress).reduce(\n        (newAddress: Record<string, string>, key) => {\n          if (otherAddress[key] !== undefined) {\n            newAddress[key] = otherAddress[key];\n          }\n          return newAddress;\n        },\n        {}\n      );\n      return {\n        ...state,\n        chosenAddress: { ...state.chosenAddress, ...definedNewAddress },\n        postcode: newPostcode,\n      };\n    case actionTypes.saveAddress:\n      return {\n        ...state,\n        postcode: null,\n        years: null,\n        months: null,\n        chosenAddress: null,\n        addresses: [],\n        savedAddress: {\n          postcode: state.postcode as string,\n          years: state.years as number,\n          months: state.months as number,\n          line1: state.chosenAddress?.line1 as string,\n          line2: state.chosenAddress?.line2 as string,\n          line3: state.chosenAddress?.line3 as string,\n          city: state.chosenAddress?.city as string,\n          county: state.chosenAddress?.county as string,\n        },\n      };\n    case actionTypes.deleteAddress:\n      return { ...state, savedAddress: null };\n    default:\n      return state;\n  }\n};\n","import \"./Header.css\";\n\ninterface HeaderProps {\n  title: string;\n  subtitle: string;\n}\n\nexport const Header = ({ title, subtitle }: HeaderProps) => {\n  return (\n    <header className=\"header\">\n      <h1 className=\"title\">{title}</h1>\n      <h3 className=\"subtitle\">{subtitle}</h3>\n      <div className=\"divider\"></div>\n    </header>\n  );\n};\n","import \"./Dropdown.css\";\n\ninterface DropdownProps {\n  defaultMessage: string;\n  options: { label: string; value: any }[];\n  value: any;\n  handleChangeValue: (value: any) => void;\n}\n\nexport const Dropdown = ({\n  defaultMessage,\n  options,\n  value,\n  handleChangeValue,\n}: DropdownProps) => {\n  return (\n    <select\n      className=\"dropdown\"\n      value={value === null ? \"\" : value} // null not allowed value, use empty string\n      onChange={(e) => {\n        handleChangeValue(e.target.value);\n      }}\n    >\n      <option key={\"none\"} value={undefined} style={{ display: \"none\" }}>\n        {defaultMessage}\n      </option>\n      {options.map((option) => (\n        <option\n          data-testid=\"select-option\"\n          key={option.label}\n          value={option.value}\n        >\n          {option.label}\n        </option>\n      ))}\n    </select>\n  );\n};\n","import React from \"react\";\nimport \"./InputSearch.css\";\n\ninterface InputSearchViewProps {\n  placeholder: string;\n  inputValue: string | null;\n  onInputChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  onSearch: (e: React.MouseEvent<HTMLButtonElement>) => void;\n  disabled: boolean;\n}\n\nexport const InputSearchView = ({\n  placeholder,\n  inputValue,\n  onInputChange,\n  onSearch,\n  disabled,\n}: InputSearchViewProps) => {\n  return (\n    <form className=\"form\">\n      <input\n        type=\"text\"\n        placeholder={placeholder}\n        className=\"input\"\n        value={inputValue === null ? \"\" : inputValue}\n        onChange={onInputChange}\n        disabled={disabled}\n      ></input>\n      <button\n        className=\"search-glass button-hover\"\n        onClick={onSearch}\n        disabled={disabled}\n      ></button>\n    </form>\n  );\n};\n","import React from \"react\";\nimport { InputSearchView } from \"./InputSearchView\";\n\ninterface InputSearchProps {\n  value: string | null;\n  placeholder: string;\n  disabled: boolean;\n  handleChange: (value: string) => void;\n  handleSearch: () => void;\n}\n\nexport const InputSearch = ({\n  value,\n  placeholder,\n  disabled,\n  handleChange,\n  handleSearch,\n}: InputSearchProps) => {\n  const onInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    e.preventDefault();\n    if (e.target.value.length <= 8) {\n      // no postcode longer than 8 characters\n      handleChange(e.target.value);\n    }\n  };\n  const onSearch = (e: React.MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault();\n    handleSearch();\n  };\n  return (\n    <InputSearchView\n      placeholder={placeholder}\n      inputValue={value}\n      onInputChange={onInputChange}\n      onSearch={onSearch}\n      disabled={disabled}\n    />\n  );\n};\n","import React from \"react\";\nimport { AddressFormActionType, ContextType } from \"./reducer\";\n\nexport const initialContext: ContextType = {\n  modal: {\n    isVisible: true,\n    title: \"Welcome to Octopus Weath\",\n    subheading: \"Please fill in your address details\",\n  },\n};\n\nexport const Context = React.createContext<\n  React.Dispatch<AddressFormActionType>\n>(() => {});\n","import axios, { AxiosRequestConfig } from \"axios\";\n\nconst apiKey = \"eKtESYz-3UWLEdxChO2gHw22427\"; // for convenience, added here as constant - in prod, would refactor into env. var.\n\nexport const fetchAddress = async (\n  postcode: string,\n  setModal: (title: string, subheading: string) => void\n): Promise<string[][]> => {\n  const config: AxiosRequestConfig = {\n    params: {\n      \"api-key\": apiKey,\n      format: true,\n    },\n    validateStatus: (status: number) => {\n      return status >= 200 && status < 300;\n    },\n  };\n  return axios\n    .get(`https://api.getAddress.io/find/${postcode}`, config)\n    .then((response) => {\n      return response.data.addresses;\n    })\n    .catch((error) => {\n      if (error.response) {\n        // handle response errors\n        setModal(\"Error from server\", error.response.data.Message);\n      } else if (error.request) {\n        // handle request errors\n        setModal(\n          \"Error in request\",\n          \"Something wrong with request - check api key\"\n        );\n      } else {\n        // handle other errors\n        setModal(\"Unknown error\", \"Please contact admin\");\n      }\n    });\n};\n","export interface ContextType {\n  modal: { title: string; subheading: string; isVisible: boolean };\n}\n\nexport enum actionTypes {\n  updateModal = \"update/modal\",\n}\n\nexport interface UpdateModalAction {\n  type: actionTypes.updateModal;\n  payload: { isVisible?: boolean; title?: string; subheading?: string };\n}\n\nexport type AddressFormActionType = UpdateModalAction;\n\nexport const reducer = (state: ContextType, action: AddressFormActionType) => {\n  switch (action.type) {\n    case actionTypes.updateModal:\n      return { ...state, modal: { ...state.modal, ...action.payload } };\n    default:\n      return state;\n  }\n};\n","import { useContext, useReducer } from \"react\";\nimport { Dropdown } from \"../../components/Dropdown/Dropdown\";\nimport { InputSearch } from \"../../components/InputSearch/InputSearch\";\nimport { Context } from \"../../context/Context\";\nimport { fetchAddress } from \"./fetchAddress\";\nimport {\n  actionTypes,\n  Address,\n  AddressFormStateType,\n  reducer,\n  SavedAddress,\n} from \"./reducer\";\nimport { actionTypes as contextActionTypes } from \"../../context/reducer\";\nimport \"./AddressForm.css\";\n\nconst yearOptions = Array.from({ length: 6 }, (_, i) => ({\n  value: i,\n  label: `${i} ${i === 1 ? \"year\" : \"years\"}`,\n}));\n\nconst monthOptions = Array.from({ length: 12 }, (_, i) => ({\n  value: i,\n  label: `${i} ${i === 1 ? \"month\" : \"months\"}`,\n}));\n\nconst initialAddressFormState: AddressFormStateType = {\n  years: null,\n  months: null,\n  postcode: null,\n  addresses: [],\n  chosenAddress: null,\n  savedAddress: null,\n};\n\nexport const getAddressOptions = (addresses: string[][]) => {\n  return addresses.map((address) => ({\n    label:\n      address.reduce((label, line) =>\n        line.length > 0 ? label + \", \" + line : label + \"\"\n      ) + \", UK\",\n    value: address,\n  }));\n};\n\nexport const getAddressArray = (address: Address) => {\n  return [\n    address.line1,\n    address.line2,\n    address.line3,\n    address.city,\n    address.county,\n  ];\n};\n\nexport const getAddressDisplay = (savedAddress: SavedAddress) => {\n  return `${savedAddress.line1}, ${savedAddress.line2}, ${savedAddress.city}, ${savedAddress.postcode}`;\n};\n\nconst isPostcodeDisabled = (state: AddressFormStateType) =>\n  state.years === null || state.months === null;\n\nconst isSaveButtonDisabled = (state: AddressFormStateType) =>\n  state.chosenAddress?.line1 === \"\" ||\n  state.chosenAddress?.line2 === \"\" ||\n  state.chosenAddress?.city === \"\" ||\n  state.postcode === \"\";\n\ninterface AddressFormProps {\n  isDisabled: boolean;\n}\n\nexport const AddressForm = ({ isDisabled }: AddressFormProps) => {\n  const [state, dispatch] = useReducer(reducer, initialAddressFormState);\n  const contextDispatch = useContext(Context);\n\n  const setModal = (title: string, subheading: string) => {\n    contextDispatch({\n      type: contextActionTypes.updateModal,\n      payload: {\n        isVisible: true,\n        title: title,\n        subheading: subheading,\n      },\n    });\n  };\n\n  const handleChangePostcode = (newValue: string) => {\n    dispatch({\n      type: actionTypes.updatePostcode,\n      payload: { newValue: newValue },\n    });\n  };\n\n  return (\n    <div className={`address-form-container ${isDisabled ? \"disabled\" : \"\"}`}>\n      {state.savedAddress !== null ? (\n        <div id=\"saved-address\">\n          <div className=\"lines\">\n            <div>{getAddressDisplay(state.savedAddress)}</div>\n            <button\n              className=\"delete-icon button-hover\"\n              onClick={(e) => {\n                e.preventDefault();\n                dispatch({ type: actionTypes.deleteAddress });\n              }}\n            ></button>\n          </div>\n          <div className=\"lines\">\n            <div>{`Time at address: ${state.savedAddress.years} ${\n              state.savedAddress.years === 1 ? \"year\" : \"years\"\n            }, ${state.savedAddress.months} ${\n              state.savedAddress.months === 1 ? \"month\" : \"months\"\n            }`}</div>\n          </div>\n        </div>\n      ) : (\n        <></>\n      )}\n      <div className=\"sub-heading\">\n        {\"How long have you lived at your current address?\"}\n      </div>\n      <div id=\"duration-answers\">\n        <span id=\"select-address-years\">\n          <Dropdown\n            defaultMessage=\"Select years\"\n            options={yearOptions}\n            value={state.years}\n            handleChangeValue={(newValue: string) =>\n              dispatch({\n                type: actionTypes.updateYears,\n                payload: { newValue: parseInt(newValue) },\n              })\n            }\n          />\n        </span>\n        <span id=\"select-address-months\">\n          <Dropdown\n            defaultMessage=\"Select months\"\n            options={monthOptions}\n            value={state.months}\n            handleChangeValue={(newValue: string) =>\n              dispatch({\n                type: actionTypes.updateMonths,\n                payload: { newValue: parseInt(newValue) },\n              })\n            }\n          />\n        </span>\n      </div>\n      <div className=\"sub-heading\">{\"Postcode search\"}</div>\n      <div id=\"postcode-search\">\n        <InputSearch\n          value={state.postcode}\n          placeholder={\"Enter postcode\"}\n          disabled={isPostcodeDisabled(state)}\n          handleChange={handleChangePostcode}\n          handleSearch={async () => {\n            if (!!state.postcode) {\n              const addresses = await fetchAddress(state.postcode, setModal);\n              if (addresses !== undefined) {\n                dispatch({\n                  type: actionTypes.setAddresses,\n                  payload: { addresses: addresses },\n                });\n              }\n            }\n          }}\n        />\n      </div>\n      {state.addresses.length > 0 ? (\n        <div className=\"select-address\">\n          <div className=\"sub-heading\">{\"Address\"}</div>\n          <span id=\"select-address-list\">\n            <Dropdown\n              defaultMessage=\"Select your address\"\n              options={getAddressOptions(state.addresses)}\n              value={\n                state.chosenAddress !== null\n                  ? getAddressArray(state.chosenAddress)\n                  : null\n              }\n              handleChangeValue={(newAddress: string) => {\n                dispatch({\n                  type: actionTypes.setChosenAddress,\n                  payload: { addressOption: newAddress },\n                });\n              }}\n            />\n          </span>\n        </div>\n      ) : (\n        <></>\n      )}\n      {state.chosenAddress !== null && state.postcode !== null ? (\n        <div id=\"address-lines-block\">\n          <div id=\"double-chevron\"></div>\n          <div className=\"sub-heading\">{\"Address Line 1*\"}</div>\n          <input\n            id=\"address-line-1\"\n            className=\"address-lines\"\n            value={state.chosenAddress.line1}\n            onChange={(e) => {\n              e.preventDefault();\n              dispatch({\n                type: actionTypes.updateChosenAddress,\n                payload: { line1: e.target.value },\n              });\n            }}\n          />\n          <div className=\"sub-heading\">{\"Address Line 2*\"}</div>\n          <input\n            id=\"address-line-2\"\n            className=\"address-lines\"\n            value={state.chosenAddress.line2}\n            onChange={(e) => {\n              e.preventDefault();\n              dispatch({\n                type: actionTypes.updateChosenAddress,\n                payload: { line2: e.target.value },\n              });\n            }}\n          />\n          <div className=\"sub-heading\">{\"City*\"}</div>\n          <input\n            id=\"address-line-city\"\n            className=\"address-lines\"\n            value={state.chosenAddress.city}\n            onChange={(e) => {\n              e.preventDefault();\n              dispatch({\n                type: actionTypes.updateChosenAddress,\n                payload: { city: e.target.value },\n              });\n            }}\n          />\n          <div className=\"sub-heading\">{\"Postcode*\"}</div>\n          <input\n            id=\"address-line-postcode\"\n            className=\"address-lines\"\n            value={state.postcode}\n            onChange={(e) =>\n              dispatch({\n                type: actionTypes.updatePostcode,\n                payload: { newValue: e.target.value },\n              })\n            }\n          />\n          <button\n            id=\"submit-button\"\n            onClick={() => {\n              if (!isSaveButtonDisabled(state)) {\n                dispatch({ type: actionTypes.saveAddress });\n              } else {\n                setModal(\"Invalid\", \"Please fill in all address form\");\n              }\n            }}\n          >\n            {\"Add address\"}\n          </button>\n        </div>\n      ) : (\n        <></>\n      )}\n    </div>\n  );\n};\n","import { useContext } from \"react\";\nimport { createPortal } from \"react-dom\";\nimport { Context } from \"../../context/Context\";\nimport { actionTypes as contextActionTypes } from \"../../context/reducer\";\nimport \"./Modal.css\";\n\ninterface ModalProps {\n  isVisible: boolean;\n  content: { title: string; subheading: string };\n}\n\nexport const Modal = ({ isVisible, content }: ModalProps) => {\n  const contextDispatch = useContext(Context);\n  const hideModal = () => {\n    contextDispatch({\n      type: contextActionTypes.updateModal,\n      payload: { isVisible: false, title: \"\", subheading: \"\" },\n    });\n  };\n  return isVisible ? (\n    createPortal(\n      <div className=\"modal\">\n        <div className=\"title\">{content.title}</div>\n        <div className=\"subheading\">{content.subheading}</div>\n        <button\n          className=\"close-button\"\n          onClick={(e) => {\n            e.preventDefault();\n            hideModal();\n          }}\n        >\n          {\"Close\"}\n        </button>\n      </div>,\n      document.body\n    )\n  ) : (\n    <div />\n  );\n};\n","import { useReducer } from \"react\";\nimport \"./App.css\";\nimport { Header } from \"./components/Header/Header\";\nimport { AddressForm } from \"./containers/AddressForm/AddressForm\";\nimport { Modal } from \"./components/Modal/Modal\";\nimport { Context } from \"./context/Context\";\nimport { reducer as contextReducer } from \"./context/reducer\";\nimport { initialContext } from \"./context/Context\";\n\nfunction App() {\n  const [context, dispatch] = useReducer(contextReducer, initialContext);\n  return (\n    <Context.Provider value={dispatch}>\n      <div className=\"App\">\n        <Header title=\"Address Search\" subtitle=\"Please enter your address\" />\n        <div className=\"App-main\">\n          <AddressForm isDisabled={context.modal.isVisible} />\n        </div>\n        <Modal\n          isVisible={context.modal.isVisible}\n          content={{\n            title: context.modal.title,\n            subheading: context.modal.subheading,\n          }}\n        />\n      </div>\n    </Context.Provider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}